import React from "react";
import Card from "@material-ui/core/Card";
import CircularProgress from "@material-ui/core/CircularProgress";
import Box from "@material-ui/core/Box";

import Button from "react-bootstrap/Button";
import Sidebar from "../applications/sidebar";
import Navbar from "../applications/navbar";
import { useEffect, useState } from "react";
import "../applications/tabler.min.css";
import "../applications/style.css";

const Web3 = require("web3");
const loan = require("../../../../contracts/LoanProfile.json");
const homecrowdToken = require("../../../../contracts/HomeCrowdToken.json");
const tokenUSDC = require("../../../../contracts/USDCInterface.json");
const ALCHEMY_KEY =
  "wss://eth-goerli.g.alchemy.com/v2/Zl0NHp   _DT9kWIHiYsRyx3SEHtrDHyl5x";
const web3 = new Web3(new Web3.providers.HttpProvider(ALCHEMY_KEY));

const loanContractAddress = "0xe1dBF785115138c4268fABc8673183C6503AC279";
const myAddress = "0xc6a3dd9e9d73eb3e66669534ed21ee169aed7f14"; // User wallet -- change this if need be
const homeCrowdTokenAddress = "0x7eA6Fa6b5245a93870F43AFd00B4ea8808b01121";

export default function Verified() {
  const bytecode =
    "";

  const [name, setName] = useState("");
  const [loans, setloans] = useState([]);
  const [id, setId] = useState();
  const [kycId, setKycId] = useState(1);

  const [currentAccount, setCurrentAccount] = useState("");
  const [contractAddress, setContractAddress] = useState("");
  const [loanAmount, setLoanAmount] = useState(0);
  const [timePeriod, setTimePeriod] = useState([
    {
      id: 1,
      timeperiod: 100,
    },
    {
      id: 2,
      timeperiod: 100,
    },
    {
      id: 3,
      timeperiod: 100,
    },
    {
      id: 4,
      timeperiod: 100,
    },
    {
      id: 5,
      timeperiod: 100,
    },
  ]);

  const checkWalletIsConnected = () => {
    const { ethereum } = window;

    if (!ethereum) {
      console.log("Make sure you have Metamask installed!");
      return;
    } else {
      console.log("Wallet exists! We're ready to go!");
    }
  };

  const connectWalletHandler = async () => {
    const { ethereum } = window;
    if (!ethereum) {
      alert("Please install Metamask!");
    }

    try {
      const accounts = await window.ethereum.request({
        method: "eth_requestAccounts",
      });

      console.log("Found an account! Address: ", accounts[0]);
      setCurrentAccount(accounts[0]);
    } catch (err) {
      console.log(err);
    }
  };

  // Get a list of loans from Db
  const getLoans = async () => {
    await fetch("https://lit-reef-14615.herokuapp.com/loan/")
      .then((response) => response.json())
      .then((data) => {
        setloans(data);
        // console.log(data);
      })
      .catch((err) => {
        console.log(err.message);
      });
  };

  const changeTP = (e, id) => {
    setTimePeriod((timePeriod) =>
      timePeriod.map((list, index) => {
        return index === id - 1
          ? {
              ...list,
              timeperiod: e.target.value,
            }
          : list;
      })
    );
  };

  // POST method for loan contract
  const addLoanContract = async (ca, id, tp, la, tc) => {
    await fetch("http://localhost:5002/loanContract/createloanContract", {
      method: "POST",
      body: JSON.stringify({
        contractAddress: ca,
        loanId: id,
        collectedAmount: 0,
        timePeriod: tp,
        loanAmount: la,
        timeCreated: tc,
      }),
      headers: {
        "Content-type": "application/json; charset=UTF-8",
      },
    })
      .then((response) => response.json())
      .catch((err) => {
        console.log(err.message);
      });
  };

  // Get loans when the page loads up
  useEffect(() => {
    checkWalletIsConnected();
    getLoans();
  }, []);

  const deployContract = async (loan_id, loan_amount, time_period) => {
    try {
      const { ethereum } = window;
      const web3 = new Web3(ethereum);
      console.log(timePeriod);
      let ca = 0;
      let amount = loan_amount;
      let tp = time_period;

      const loanProfileContract = new web3.eth.Contract(
        loan.abi,
        loanContractAddress
      );
      console.log({ loan_id, amount, tp, homeCrowdTokenAddress });

      let deploy = await loanProfileContract
        .deploy({
          data: bytecode,
          arguments: [loan_id, amount, tp, homeCrowdTokenAddress],
        })
        .send(
          {
            from: currentAccount,
            gas: 5000000,
            gasPrice: 2500000011,
          },
          function (error, transactionHash) {
            console.log(transactionHash);
          }
        )
        .on("error", function (error) {
          console.log(error);
        })
        .on("receipt", function (receipt) {
          ca = receipt["contractAddress"];
          setContractAddress(ca);
          console.log("CA", receipt["contractAddress"]); // contains the new contract address
        });

      alert("deployment successful");
      console.log(deploy);
      // addLoanContract(ca, loans[key].id, tp, amount,new Date().getTime());
    } catch (err) {
      console.log(err);
      alert("deposit failed");
    }
  };

  const handleClick = (e, id, amount, period, tp) => {
    console.log({ id, amount, period }); // period is input campagin
    // e.preventDefault();

    // deployContract(id, amount, tp);
  };

  return (
    <div className="wrapper">
      {/* <Sidebar/> */}
      <Navbar />
      <div className="main">
        <div className="d-print-none">
          <div className="row">
            <div className="col">
              <h2 className="pretitle">Applications Management</h2>
              <h2 className="page-title">Loan Application</h2>
            </div>
            <div className="col-auto ms-auto d-print-none pb-2">
              {currentAccount ? (
                <div className="col-auto ms-auto d-print-none pb-2">
                  <Button variant="secondary" onClick={connectWalletHandler}>
                    {currentAccount}{" "}
                  </Button>
                </div>
              ) : (
                <div className="col-auto ms-auto d-print-none pb-2">
                  <Button variant="secondary" onClick={connectWalletHandler}>
                    Connect Wallet
                  </Button>
                </div>
              )}{" "}
            </div>
            <div className="col-auto ms-auto d-print-none pb-2">
              <Button variant="primary">Insert New</Button>
              {""}{" "}
            </div>
          </div>
        </div>
        <div className="row">
          <div className="col-md-12 loantable">
            <Card
              style={{
                textAlign: "left",
                position: "relative",
                display: "flex",
                flexDirection: "column",
              }}
            >
              <div class="table-responsive-sm">
                <table
                  className="table table-striped table-bordered table-vcenter"
                  cellpadding="0"
                  cellspacing="0"
                >
                  <thead>
                    <tr>
                      <th>LOAN ID</th>
                      <th>LOAN AMOUNT</th>
                      <th>TIME PERIOD</th>
                      <th>STATUS</th>
                      <th>Action</th>
                    </tr>
                  </thead>
                  <tbody>
                    {loans.length > 0 ? (
                      <>
                        {loans.map((val, key) => {
                          return (
                            <tr key={key}>
                              <td> {val.loan_id} </td>

                              <td>{val.loan_amt}</td>

                              <td>
                                <input
                                  type="number"
                                  placeholder="Campaign Period"
                                  name={val.id}
                                  onChange={(e) => {
                                    const changedArr = [];
                                    const timePeriod = Number(e.target.value);
                                    loans.map((loan) => {
                                      if (loan.loan_id === val.loan_id) {
                                        changedArr.push({
                                          ...loan,
                                          loan_term: timePeriod,
                                        });
                                      } else {
                                        changedArr.push(loan);
                                      }
                                    });
                                    setloans([...changedArr]);
                                  }}
                                ></input>
                              </td>
                              <td>
                                <span className="text-success">Approved</span>
                              </td>
                              <td className="text-center">
                                <a href="#">
                                  <Button
                                    variant="primary"
                                    onClick={(e) =>
                                      handleClick(
                                        e,
                                        val.loan_id,
                                        val.loan_amt,
                                        val.loan_term,
                                        2592000
                                      )
                                    }
                                  >
                                    Deploy
                                  </Button>
                                </a>
                              </td>
                            </tr>
                          );
                        })}
                      </>
                    ) : (
                      <tr>
                        <td colspan="5">
                          <Box sx={{ textAlign: "center", my: 5 }}>
                            <CircularProgress />
                          </Box>
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
